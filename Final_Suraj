#SURAJ UPADHYAY
#CSC 263-02
#12-11-2017

#This program will print the sum of the daigonals and even all the elements of the matrix.

.data
matrix: .space 25
msg1: .asciiz "\nThe sum of left to right daigonal is: "
msg2: .asciiz "\nThe sum of right to left daigoinal is: "
msg3: .asciiz "\nThe sum of all the elements in the matrix is: "
askSize: .asciiz "Please enter the size of the matrix[2-5]: "
askElement: .asciiz "Please enter a positive: "
validIntMsg: .asciiz "Please re-enter a positive integer: "
  .text 
 
 main:
  
  li $v0, 4
  la $a0, askSize
  syscall
  
  li $v0, 5
  syscall
  jal checkSize
  move $s0, $v0		#$s0 contains size
  
  mul $t2, $v0, $v0		#$t2 contains no. of elements
  li $t0, 0
  la $t1, matrix		
  
  #Storing the elements in the matrix
  for0: 
  	beq $t0, $t2, endFor0
  	addi $t0, $t0, 1
  	
  	li $v0, 4
  	la $a0, askElement
  	syscall
  	
  	li $v0, 5
 	syscall
 	
 	jal checkInput
 	
 	sw $a0, ($t1)
 	addi $t1, $t1, 4
  	j for0
  endFor0:
  
  li $s1, 0	#sum of all the elements
  li $s2, 0	#sum of the daigonal left to right
  li $s3, 0	#sum of the daigonal right to left
  
  
  li $v0, 4
  la $a0, msg3
  syscall
  
  la $a0, matrix
  move $a1, $s0
  jal sumAll
  
  li $v0, 4
  la $a0, msg2
  syscall
  
  la $a0, matrix
  move $a1, $s0
  jal righttoleftsum
  
  la $a0, matrix
  move $a1, $s0
  jal lefttorightsum	#calculates and prints the sum of left-right daigonal
  
  
  li $v0, 10	#exit
  syscall
  
  
  
  
  
  #methods....
  
  #checking the size
  checkSize:
  	bgt $v0, 5, error
  	blt $v0, 2, error
  	jr $ra
  error:
  	j main
  	
  #check input
  checkInput:
  	blez $v0, error1
  	move $a0, $v0
  	jr $ra
  error1:
  	li $v0, 4
  	la $a0, validIntMsg
  	syscall
  	
  	li $v0, 5
 	syscall
  	
  	j checkInput
  	
  
  #sum of all the elements
  sumAll:
  	 mul $t2, $s0, $s0		#$t2 contains no. of elements
  	 li $t0, 0
  	 li $t1, 0
  	 
  for2:
  	beq $t0, $t2, endFor2
  	addi $t0, $t0, 1
  	lw $t3, ($a0)		
  	add $t1, $t1, $t3
  	addi $a0, $a0, 4
  	j for2
  	
  endFor2:
  
  	li $v0, 1
  	move $a0, $t1
  	syscall
  	jr $ra	
  
  
  #sum of elements along right-left diagonal
  
  righttoleftsum:
  	 li $t0, 0
  	 li $t1, 0
  	 
  	 subi $t4, $a1, 1
  	 mul $t5, $t4, 4
  	 
  for3:
  	beq $t0, $a1, endFor3
  	addi $t0, $t0, 1
  	add $a0, $a0, $t5
  	lw $t3, ($a0)		
  	add $t1, $t1, $t3
  	j for3
  	
  endFor3:
  
  	li $v0, 1
  	move $a0, $t1
  	syscall
  	jr $ra	
  
  #sum of elements along the left-right diagonal
lefttorightsum:
    lw $t8, 0($a0) # contents of $a0 will be stored in $t8
    move $t1, $a0  # move $a0 to $t1
    addi $t3, $a1,1 #add $t3= $a1+1
    sll $t3, $t3, 2 # multiply by 4
    addi $t0, $a1, -1 # Add $t0= $a1-1
    
    loop: 
    add $t1, $t1, $t3 # Calculate the next address
    lw $t2, 0($t1) # load contents of $t1 to $t2
    add $t8, $t8, $t2 # add $t8= $t8+$t2
    addi $t0, $t0, -1 # add $t0= $t0-1
    bgtz $t0, loop # It will check for if greater than 0 if it is true 
    
    
    li $v0, 4 # the loop will continue
    la $a0, msg1 # it will print the output lable
    syscall 
    
    li $v0, 1
    move $a0, $t8 # Move $t8 to $a0
    syscall 
    
    jr $ra
